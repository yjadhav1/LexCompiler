Grammar

    0 $accept: stmt $end

    1 stmt: %empty
    2     | stmt expr_stmt

    3 expr_stmt: expr TOK_SEMICOLON
    4          | TOK_PRINTLN expr TOK_SEMICOLON

    5 expr: expr TOK_ADD expr
    6     | expr TOK_SUB expr
    7     | expr TOK_MUL expr
    8     | expr TOK_DIV expr
    9     | TOK_NUM


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_SEMICOLON (258) 3 4
TOK_ADD (259) 5
TOK_SUB (260) 6
TOK_MUL (261) 7
TOK_DIV (262) 8
TOK_NUM (263) 9
TOK_PRINTLN (264) 4


Nonterminals, with rules where they appear

$accept (10)
    on left: 0
stmt (11)
    on left: 1 2, on right: 0 2
expr_stmt (12)
    on left: 3 4, on right: 2
expr (13)
    on left: 5 6 7 8 9, on right: 3 4 5 6 7 8


State 0

    0 $accept: . stmt $end

    $default  reduce using rule 1 (stmt)

    stmt  go to state 1


State 1

    0 $accept: stmt . $end
    2 stmt: stmt . expr_stmt

    $end         shift, and go to state 2
    TOK_NUM      shift, and go to state 3
    TOK_PRINTLN  shift, and go to state 4

    expr_stmt  go to state 5
    expr       go to state 6


State 2

    0 $accept: stmt $end .

    $default  accept


State 3

    9 expr: TOK_NUM .

    $default  reduce using rule 9 (expr)


State 4

    4 expr_stmt: TOK_PRINTLN . expr TOK_SEMICOLON

    TOK_NUM  shift, and go to state 3

    expr  go to state 7


State 5

    2 stmt: stmt expr_stmt .

    $default  reduce using rule 2 (stmt)


State 6

    3 expr_stmt: expr . TOK_SEMICOLON
    5 expr: expr . TOK_ADD expr
    6     | expr . TOK_SUB expr
    7     | expr . TOK_MUL expr
    8     | expr . TOK_DIV expr

    TOK_SEMICOLON  shift, and go to state 8
    TOK_ADD        shift, and go to state 9
    TOK_SUB        shift, and go to state 10
    TOK_MUL        shift, and go to state 11
    TOK_DIV        shift, and go to state 12


State 7

    4 expr_stmt: TOK_PRINTLN expr . TOK_SEMICOLON
    5 expr: expr . TOK_ADD expr
    6     | expr . TOK_SUB expr
    7     | expr . TOK_MUL expr
    8     | expr . TOK_DIV expr

    TOK_SEMICOLON  shift, and go to state 13
    TOK_ADD        shift, and go to state 9
    TOK_SUB        shift, and go to state 10
    TOK_MUL        shift, and go to state 11
    TOK_DIV        shift, and go to state 12


State 8

    3 expr_stmt: expr TOK_SEMICOLON .

    $default  reduce using rule 3 (expr_stmt)


State 9

    5 expr: expr TOK_ADD . expr

    TOK_NUM  shift, and go to state 3

    expr  go to state 14


State 10

    6 expr: expr TOK_SUB . expr

    TOK_NUM  shift, and go to state 3

    expr  go to state 15


State 11

    7 expr: expr TOK_MUL . expr

    TOK_NUM  shift, and go to state 3

    expr  go to state 16


State 12

    8 expr: expr TOK_DIV . expr

    TOK_NUM  shift, and go to state 3

    expr  go to state 17


State 13

    4 expr_stmt: TOK_PRINTLN expr TOK_SEMICOLON .

    $default  reduce using rule 4 (expr_stmt)


State 14

    5 expr: expr . TOK_ADD expr
    5     | expr TOK_ADD expr .
    6     | expr . TOK_SUB expr
    7     | expr . TOK_MUL expr
    8     | expr . TOK_DIV expr

    TOK_MUL  shift, and go to state 11
    TOK_DIV  shift, and go to state 12

    $default  reduce using rule 5 (expr)


State 15

    5 expr: expr . TOK_ADD expr
    6     | expr . TOK_SUB expr
    6     | expr TOK_SUB expr .
    7     | expr . TOK_MUL expr
    8     | expr . TOK_DIV expr

    TOK_MUL  shift, and go to state 11
    TOK_DIV  shift, and go to state 12

    $default  reduce using rule 6 (expr)


State 16

    5 expr: expr . TOK_ADD expr
    6     | expr . TOK_SUB expr
    7     | expr . TOK_MUL expr
    7     | expr TOK_MUL expr .
    8     | expr . TOK_DIV expr

    $default  reduce using rule 7 (expr)


State 17

    5 expr: expr . TOK_ADD expr
    6     | expr . TOK_SUB expr
    7     | expr . TOK_MUL expr
    8     | expr . TOK_DIV expr
    8     | expr TOK_DIV expr .

    $default  reduce using rule 8 (expr)
